== EMULATION

Detest can emulate several popular testing libraries:

<%
  emulation_layers = {
    'detest/spec' => '<<RSpec>>',
    'detest/unit' => '<<Test::Unit>>',
    'detest/mini' => '<<Minitest>>',
    'detest/long' => 'Readability',
  }
%>

[horizontal]
% emulation_layers.each do |layer, title|
  <%= layer %>:: <%= title %> emulation layer

Simply require one of these emulation layers into your test suite and you can
write your tests using the familiar syntax of the testing library it emulates.

//////////////////////////////////////////////////////////////////////////////
// list all methods provided by the various emulation layers
//////////////////////////////////////////////////////////////////////////////

% require 'detest'
% before = Detest.instance_methods(false)
% sandbox = Object.new.extend(Detest)

% emulation_layers.each do |layer, title|
  % require layer
  % after = Detest.instance_methods(false)

  % unless before == after

    === <%= layer %>

    This library emulates <%= title %> by adding the following methods to the
    `Detest` module.

    [horizontal]

    % (after - before).sort.each do |method_name|
      % method = sandbox.method(method_name)

      % file, line = method.source_location
      % file = file.sub(Detest::INSTDIR, '').sub(%r(^/+), '')
      % url = "#{@code_repo_url}/tree/master/#{file}#L#{line}"

      <%= method.name %>(<%=
        method.parameters.map do |type, name|
          name = "__#{name}__" # unconstrained italics in AsciiDoc
          case type
          when :opt   then name + '=nil'
          when :rest  then '*' + name
          when :block then '&' + name
          else name
          end
        end.join(', ')
      %>):: <%= url %>[<%= file %>:<%= line %>]


    % before = after
