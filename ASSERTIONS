== ASSERTIONS

=== Writing assertions

The following methods accept a block parameter and assert something about the
result of executing that block.  They also accept an optional message, which
is shown in <<failures, their failure reports>> if they fail.

[horizontal]
`T()` :: assert true (not `nil` and not `false`) -- <%= method_api_docs 'T' %>
`F()` :: assert not true (`nil` or `false`)      -- <%= method_api_docs 'F' %>
`N()` :: assert that the value is `nil`          -- <%= method_api_docs 'N' %>
`E()` :: assert that an execption is raised      -- <%= method_api_docs 'E' %>
`C()` :: assert that a symbol is thrown          -- <%= method_api_docs 'C' %>

For the `T()` and `F()` methods, you may alternatively pass the condition to
be asserted as the first argument (instead of passing it as a block).  This
might result in a more pleasing syntax, depending on your taste:

[source,ruby]
------------------------------------------------------------------------------
my_ticket = rand()
winning_ticket = rand()

# passing the condition as a block:
T("I won?!  Dream on.") { my_ticket != winning_ticket }
F("I won?!  Dream on.") { my_ticket == winning_ticket }

# passing the condition as an argument:
T my_ticket != winning_ticket, "I won?!  Dream on."
F my_ticket == winning_ticket, "I won?!  Dream on."
------------------------------------------------------------------------------

=== Negating assertions

The following methods are the _opposite_ of normal assertions.

[horizontal]
`T!()` :: same as `F()`                             -- <%= method_api_docs 'T!' %>
`F!()` :: same as `T()`                             -- <%= method_api_docs 'F!' %>
`N!()` :: assert that value is not `nil`            -- <%= method_api_docs 'N!' %>
`E!()` :: assert that an exception is _not_ raised  -- <%= method_api_docs 'E!' %>
`C!()` :: assert that a symbol is _not_ thrown      -- <%= method_api_docs 'C!' %>

=== Sampling assertions

The following methods let you _check the outcome_ of an assertion without
recording a success or failure in the test execution report.

[horizontal]
`T?()` :: returns true if `T()` passes; false otherwise -- <%= method_api_docs 'T?' %>
`F?()` :: returns true if `F()` passes; false otherwise -- <%= method_api_docs 'F?' %>
`N?()` :: returns true if `N()` passes; false otherwise -- <%= method_api_docs 'N?' %>
`E?()` :: returns true if `E()` passes; false otherwise -- <%= method_api_docs 'E?' %>
`C?()` :: returns true if `C()` passes; false otherwise -- <%= method_api_docs 'C?' %>

=== [[failures]] Assertion failure reports

Assertions failures are reported in the following manner:

------------------------------------------------------------------------------
- fail: block must yield true (!nil && !false)
  call:
  - test/simple.rb:17
  - test/simple.rb:3
  code: |-
    [12..22] in test/simple.rb
       12
       13     D "with more nested tests" do
       14       x = 5
       15
       16       T { x > 2 }   # passes
    => 17       F { x > 2 }   # fails
       18       E { x.hello } # passes
       19     end
       20   end
       21
       22   # equivalent of before(:each) or setup()
  bind: test/simple.rb:17
  vars:
    x: (Fixnum) 5
    y: (Fixnum) 83
------------------------------------------------------------------------------

Failure reports are composed of the following sections:

[horizontal]
`:fail` :: Description of the assertion failure.
`:call` :: Stack trace leading to the point of failure.
`:code` :: Source code surrounding the point of failure.
`:bind` :: Source location of values in `:vars` section.
`:vars` :: Local variables visible at the point of failure.

After the failure is reported, you will be placed into a debugger to
investigate the failure if the `Detest.debug` option is enabled.

Assertion failure reports can be accessed at any time within the test
execution trace provided by the `Detest.trace()` method.
