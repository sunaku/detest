%#----------------------------------------------------------------------------
## VERSIONS
%#----------------------------------------------------------------------------

This section contains release notes of current and past releases.

%#----------------------------------------------------------------------------
### Version 2.1.0 (2010-03-31)
%#----------------------------------------------------------------------------

This release adds a command-line test runner and performs some minor
housekeeping.

New features:

  * Add `bin/dfect` executable as command-line interface to this library.

Housekeeping:

  * Do not `require 'rubygems'` before loading the "ruby-debug" library.

  * Upgrade to Inochi 2.0.0-rc2 for managing this project.

%#----------------------------------------------------------------------------
### Version 2.0.0 (2010-03-21)
%#----------------------------------------------------------------------------

This release adds the ability to insulate tests from each other, share code
between them, makes the order of parameters consistent in the API, improves
user interactivity, fixes some bugs, and revises the user manual.

Incompatible changes:

  * Root-level calls to the `Dfect::D()`
    method are automatically insulated now.

  * The `Dfect::E()` methods now expects its optional message
    parameter to be the *last parameter* in the parameter list.

  * The `Dfect::C()` methods now expect their first parameter to
    be a symbol instead of the optional message to be shown in
    case of assertion failure.

  * The `Dfect::R()` has been renamed to `Dfect::L()`,
    which is a mnemonic for "Logging".

  * Shorten names of hash keys in the execution trace for brevity
    and rename `:raise` key in report statistics to `:error`.

  * Only the most helpful subset of the failure details is shown before
    placing the user into a debugger because they can query the omitted
    information (on demand) inside the debugger.

  * The execution trace is only shown if all tests passed in `Dfect::run()`.

  * The `:debug` option is now set to Ruby's `$DEBUG` global by default.

New features:

  * Print failures as they occur instead of waiting until the end.

  * Allow passing condition as argument to true/false assertions instead
    of requiring the condition to be passed as a code block, and also fall
    back to the binding of inner-most enclosing test or hook when
    debugging or constructing a failure report for an assertion that was
    not given a block.

    This allows you to reduce "line noise" in your tests:

        D "Lottery" do
          winning_ticket = rand()

          D "My chances of winning" do
            my_ticket = rand()
            F my_ticket == winning_ticket, "I won?!  Dream on."
          end
        end

  * Add `Dfect::S()` methods for sharing code between tests.

  * Add `Dfect::D!()` method to explicitly insulate a test from other
    tests, the top-level Ruby environment, and the code being tested.

  * Add `Dfect::info()` method which returns the details of
    the failure that is currently being debugged by the user.

  * Add instance variables to the `:vars` section of a failure report.

  * Add `setup!()` and `teardown!()` methods for before-all and
    after-all hooks in the dfect/unit emulation library.

  * Add test execution time to statistics hash (under the `:time` key).

Bug fixes:

  * Do not print any output when `:quiet` option is active.

  * Allow passing multiple strings/objects to `Dfect::D()` like in RSpec.

  * Make before and after hook methods mixin-able like assertions.

  * Do not assume that `Module#to_s` is the same as `Module#name`.

Housekeeping:

  * Upgrade to Inochi 2.0.0-rc1 for managing this project.

  * Make emulation libraries modify Dfect module instead of Kernel.

  * Do not pollute the user's output with our `Class#to_yaml` workaround.

  * Remove "Motivation" section from user manual.  It was too fanatic!

%#----------------------------------------------------------------------------
### Version 1.1.0 (2009-10-27)
%#----------------------------------------------------------------------------

This release adds a new method for emitting status messages and does some
internal housekeeping.

Thank you:

  * Iñaki Baz Castillo used Dfect and suggested new features.

New features:

  * Add `Dfect::S()` method for adding status messages to the
    execution report.  This feature was [requested
    by](http://github.com/sunaku/dfect/issues/1) Iñaki Baz Castillo.

Housekeeping:

  * Remove unused require of 'delegate' standard library in 'dfect/spec'
    RSpec emulation layer.

  * Mention emulation layers for popular testing libraries.

  * Mention that assertions take an optional message parameter.

  * Replace sample unit test with Dfect test suite.

  * Upgrade user manual to ERBook 9.0.0.

%#----------------------------------------------------------------------------
### Version 1.0.1 (2009-10-07)
%#----------------------------------------------------------------------------

This release fixes a bug in the Test::Unit emulation library and revises the
user manual.

Bug fixes:

  * The parameters for the `assert_equal()` method in the
    dfect/unit library were in the wrong order.

Housekeeping:

  * Revise user manual to better fit jQuery UI tabs.

  * Justify the use of `eval()` in emulation libraries.

  * Use simpler Copyright reminder at the top of every file.

  * Make SLOC count in user manual reflect the *core* library only.

  * Mark code spans with `{:lang=ruby}` instead of HTML `<code/>` tags.

  * Open source is for fun, so [be nice](
    http://loiclemeur.com/english/2009/03/never-criticize-your-competitors.html
    ) and speak of "related works" instead of "competitors".

%#----------------------------------------------------------------------------
### Version 1.0.0 (2009-05-03)
%#----------------------------------------------------------------------------

This release improves default choices, adds emulation layers to mimic other
testing libraries, and fixes some bugs.

Incompatible changes:

  * The `:debug` option is now enabled by default and is no longer linked to
    the value of `$DEBUG`.

  * `Dfect.run()` now appends to previous results by default.

    This behavior can be disabled by passing `false` to the method.

New features:

  * Add emulation layers to mimic other testing libraries:
    * dfect/unit --- Test::Unit
    * dfect/mini --- Minitest
    * dfect/spec --- RSpec

Bug fixes:

  * Do not blindly replace `Class#to_yaml`; it might be fixed someday.

Housekeeping:

  * Add "Motivation" section in user manual to promote interactive
    debugging.

  * Add brief History of this project's inception.

  * Remove redundant assertions for F!() and T!() methods in test suite.

  * Add copyright notice at the top of every file.

%#----------------------------------------------------------------------------
### Version 0.1.0 (2009-04-28)
%#----------------------------------------------------------------------------

This release adds new variations to assertion methods, fixes several bugs,
and improves test coverage.

Thank you:

  * François Beausoleil contributed patches for both code *and* tests! :-)

New features:

  * Added negation (m!) and sampling (m?) variations to normal assertion
    methods.  These new methods implement assertion functionality missing so
    far (previously we could not assert that a given exception was NOT thrown)
    and thereby allow us to fully test Dfect using itself.

  * Added documentation on how to insulate tests from the global Ruby
    namespace.

Bug fixes:

  * The `E()` method did not consider the case where a block does not raise
    anything as a failure. ---*François Beausoleil*

  * When creating a report about an assertion failure, an exception would be
    thrown if any local variables pointed to an empty array.

  * The `Dfect::<()` method broke the inheritance-checking behavior of the <
    class method.

    Added a bypass to the originial behavior so that `RCov::XX` can properly
    generate a report about code that uses Dfect.

  * Added workaround for YAML error when serializing a class object:

        TypeError: can't dump anonymous class Class

Housekeeping:

  * Filled the big holes in test coverage.  Everything except the runtime
    debugging logic is now covered by the unit tests.

%#----------------------------------------------------------------------------
### Version 0.0.0 (2009-04-13)
%#----------------------------------------------------------------------------

For the longest time, I took [Test::Unit] and [RSpec] for granted.  They were
the epitomy of modern Ruby practice; the insurmountable status quo;
immortalized in books, conferences, and blogs alike.

Why would *anyone* think of using anything remotely different, let alone be
foolish enough to write an alternative testing library when these are clearly
*good enough*?

Recent experiments in assertion testing libraries smashed my world view:

* [assert{ 2.0 }]
* [Testy]
* [Verify]

The status quo was certainly *not* "good enough", as I had so blindly
believed all these years.  In fact, they were *verbose* behemoths that chose
to encode endless permutations of conjecture into methods.

Empowered by this revelation and inspired by [Sean O'Halpin's musing](
http://www.ruby-forum.com/topic/183354#801895 ) on alternative names for
assertion methods, I rose to challenge the status quo.

And so I present to you the first public release of "Dfect".
