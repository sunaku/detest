%#----------------------------------------------------------------------------
## EXAMPLES
%#----------------------------------------------------------------------------

Begin by loading Detest into your program:

    require 'rubygems' # might not be necessary; see HACKING
    require 'detest'

You now have access to the `Detest` module, whose methods can be called
directly:

    Detest.D "hello" do  # D() is a class method
      puts "world"
    end

or mixed-in and called implicitly:

    include Detest       # mix-in the Detest module

    D "hello" do          # D() is an instance method
      puts "world"
    end

according to your preference.

%#----------------------------------------------------------------------------

<%
  def example &block
    Ember::Template.wrap_content_block(block) do |content|
      code = "require 'detest/auto'\n\n#{content.join}"
      [
        'When the following test is run:',
        preformatted(code),

        'Detest will output the following:',
        preformatted(
          IO.popen('ruby -Ilib 2>&1', 'w+') do |ruby|
            ruby.write code
            ruby.close_write
            ruby.read
          end
        )
      ].join("\n\n")
    end
  end
%>

%#----------------------------------------------------------------------------
### Logging information in the execution report
%#----------------------------------------------------------------------------

%|example
  D 'Wizard' do
    I 'Preparing spell to defeat mortal foes...'
  end

  D 'Magician' do
    I 'Preparing rabbits to pull from hat...', rand(15)
  end

  D 'Calculator' do
    I Math::PI, [1, 2, 3, ['a', 'b', 'c']], {:foo => 'bar!'}
  end

%#----------------------------------------------------------------------------
### Using hooks to perform before and after actions
%#----------------------------------------------------------------------------

%|example
  D "outer test" do
    D .<  { I "(outer hook) before each" }
    D .>  { I "(outer hook) after each" }
    D .<< { I "(outer hook) before all" }
    D .>> { I "(outer hook) after all" }

    D "inner test 1" do
      D .<  { I "(inner hook) before each" }
      D .>  { I "(inner hook) after each" }
      D .<< { I "(inner hook) before all" }
      D .>> { I "(inner hook) after all" }

      D "inner test 1.1" do
        I "hello world"
      end
    end

    D "inner test 2" do
      I "goodbye world"
    end

    D .<  { I "(outer hook) before each, again" }
    D .>  { I "(outer hook) after each, again" }
  end

%#----------------------------------------------------------------------------
### Sharing code between tests
%#----------------------------------------------------------------------------

%|example
  S :knowledge do
    I 'Knowledge is power!'
  end

  D 'Healer' do
    S :knowledge
  end

  D 'Warrior' do
    S! :strength do
      I 'Strength is power!'
    end
  end

  D 'Wizard' do
    S :knowledge
    S :strength
  end

  D 'King' do
    T { S? :knowledge }
    T { S? :strength }
    F { S? :power }
    I 'Power is power!'
  end

%#----------------------------------------------------------------------------
### Insulated and uninsulated tests
%#----------------------------------------------------------------------------

%|example
  D "a root-level test" do
    @outside = 1
    T { defined? @outside }
    T { @outside == 1 }

    D "an inner, non-insulated test" do
      T { defined? @outside }
      T { @outside == 1 }
    end

    D! "an inner, insulated test" do
      F { defined? @outside }
      F { @outside == 1 }

      @inside = 2
      T { defined? @inside }
      T { @inside == 2 }
    end

    F { defined? @inside }
    F { @inside == 2 }
  end
